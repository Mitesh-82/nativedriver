#summary How to configure your build and AndroidManifest.xml file to enable testing your app with Android NativeDriver
#labels Featured

==Making an Android App Testable with !NativeDriver==

The Android !NativeDriver (AND) works as instrumentation in your app. It starts a Jetty server on the device which listens for !WebDriver JSON protocol requests. In order to make an application run this instrumentation, and respond to these !WebDriver requests:

<ol>
<li>Link *server-standalone.jar* to your application. If you have not built the *server-standalone.jar* file yet, follow the steps under _Build the !NativeDriver libraries_ in the <a href="http://code.google.com/p/nativedriver/wiki/GettingStartedAndroid">Getting Started</a> documentation.</li>
<li>In the app's *!AndroidManifest.xml* file, add the following elements in the `<manifest>` element:
{{{
  <instrumentation android:targetPackage="{app_package_name}"
   android:name="com.google.android.testing.nativedriver.server.ServerInstrumentation" />
  <uses-permission android:name="android.permission.INTERNET" />
  <uses-permission android:name="android.permission.WAKE_LOCK" />
  <uses-permission android:name="android.permission.DISABLE_KEYGUARD" />
}}}
The first element enables the instrumentation against your application. `{app_package_name}` is the name of the package as specified by the manifest element's package attribute. The other lines are permissions to enable testing by AND:
<ul>
<li>`INTERNET` - allows the Jetty server to start and listen for web requests. If this is missing, the <a href="https://code.google.com/p/nativedriver/source/browse/trunk/android/src/com/google/android/testing/nativedriver/server/ServerInstrumentation.java">!ServerInstrumentation</a> cannot start all.</li>
<li>`WAKE_LOCK` - allows AND to hold a wake lock, which prevents the screen from sleeping and locking as a result of inactivity. This is optional.</li>
<li>`DISABLE_KEYGUARD` - allows AND to disable the screen lock when the !ServerInstrumentation starts. This is optional.</li>
</ul>
If the optional permissions are omitted, you may have to interact with the device manually to by-pass the key guard or  wake up the device.</li>
<li>Build the application apk and install it to the device.</li>
<li>Start the instrumentation by running this at the command line:
{{{
adb shell am instrument {app_package_name}/com.google.android.testing.nativedriver.server.ServerInstrumentation
}}}
</li>
<li>Enable port forwarding with this command:
{{{
adb forward tcp:54129 tcp:54129
}}}
</li>
<li>
You can confirm that the instrumentation is started by running `adb logcat` and looking for a line like this:
{{{
I/com.google.android.testing.nativedriver.server.ServerInstrumentation(  273): Jetty started on port 54129
}}}
</li>
</ol>
After following these steps you can run a !NativeDriver test on the emulator host machine, or the machine connected to the device. For a sample test, see one of the <a href="https://code.google.com/p/nativedriver/source/browse/#svn%2Ftrunk%2Fandroid%2Ftest%2Fcom%2Fgoogle%2Fandroid%2Ftesting%2Fnativedriver">JUnit sample tests</a>. The test code must be linked to *client-standalone.jar*.